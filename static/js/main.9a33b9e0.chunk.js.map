{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","createStyles","root","margin","spacing","width","link","color","App","classes","useState","url","setUrl","text","setText","mdLink","setMdLink","openTip","setOpenTip","changeMdLink","className","noValidate","autoComplete","TextField","id","label","variant","onChange","event","result","target","value","match","gdid","imageUrl","InputProps","readOnly","endAdornment","Tooltip","arrow","open","onClose","disableHoverListener","placement","title","InputAdornment","position","onCopy","IconButton","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAUMA,EAAYC,aAAW,SAACC,GAAD,OAC3BC,YAAa,CACXC,KAAM,CACJ,QAAS,CACPC,OAAQH,EAAMI,QAAQ,GACtBC,MAAO,SAGXC,KAAM,CACJC,MAAO,cAyFEC,EAjFiB,WAC9B,IAAMC,EAAUX,IADoB,EAGdY,mBAAS,IAHK,mBAG7BC,EAH6B,KAGxBC,EAHwB,OAIZF,mBAAS,IAJG,mBAI7BG,EAJ6B,KAIvBC,EAJuB,OAKRJ,mBAAS,SALD,mBAK7BK,EAL6B,KAKrBC,EALqB,OAMNN,oBAAS,GANH,mBAM7BO,EAN6B,KAMpBC,EANoB,KAQ9BC,EAAe,SAACR,EAAaE,GACjCG,EAAU,KAAD,OAAMH,EAAN,aAAeF,EAAf,OAwBX,OACE,qBAAKS,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,wBACA,8BACE,uBAAMA,UAAWX,EAAQP,KAAMmB,YAAU,EAACC,aAAa,MAAvD,UACE,cAACC,EAAA,EAAD,CAAWC,GAAG,SAASC,MAAM,iEAAyBC,QAAQ,WAAWC,SA3B3D,SAACC,GACvB,IAEMC,EAFgBD,EAAME,OAAOC,MAEdC,MAAM,+DACrBC,EAAeJ,EAASA,EAAO,GAAK,GAEpCK,EAAgB,qDAAiDD,GACvErB,EAAOsB,GACPf,EAAae,EAAUrB,MAoBf,cAACU,EAAA,EAAD,CAAWC,GAAG,aAAaC,MAAM,6CAAUC,QAAQ,WAAWC,SAjB/C,SAACC,GACxB,IAAMG,EAAgBH,EAAME,OAAOC,MACnCjB,EAAQiB,GACRZ,EAAaR,EAAKoB,WAiBd,8BACE,cAACR,EAAA,EAAD,CACEC,GAAG,OACHC,MAAM,+CACNM,MAAOhB,EACPoB,WAAY,CACVC,UAAU,EACVC,aACE,cAACC,EAAA,EAAD,CACEC,OAAK,EACLC,KAAMvB,EACNwB,QAzBO,WACrBvB,GAAW,IAyBGwB,sBAAoB,EACpBC,UAAU,SACVC,MAAM,8CANR,SAQE,cAACC,EAAA,EAAD,CAAgBC,SAAS,MAAzB,SACE,cAAC,kBAAD,CACEjC,KAAME,EACNgC,OAAQ,SAAClC,EAAMgB,GAAP,OAAkBX,EAAWW,IAFvC,SAIE,cAACmB,EAAA,EAAD,UACE,cAAC,IAAD,aAOZtB,QAAQ,aAGZ,8BCxFOuB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9a33b9e0.chunk.js","sourcesContent":["import React, { FC, useState } from 'react';\nimport './App.css';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\nimport Tooltip from '@material-ui/core/Tooltip';\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n        width: '25ch',\n      },\n    },\n    link: {\n      color: 'black'\n    }\n  }),\n);\n\ninterface AppProps {\n}\n\nconst App: React.FC<AppProps> = () => {\n  const classes = useStyles();\n\n  const [url, setUrl] = useState('');\n  const [text, setText] = useState('');\n  const [mdLink, setMdLink] = useState('![]()');\n  const [openTip, setOpenTip] = useState(false);\n\n  const changeMdLink = (url: string, text: string) => {\n    setMdLink(`![${text}](${url})`);        \n  }\n\n  const handleUrlChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value: string = event.target.value;\n\n    const result = value.match(/^https:\\/\\/drive.google.com\\/file\\/d\\/([a-zA-z0-9\\-]+)\\/.+$/);\n    const gdid: string = result ? result[1] : '';\n\n    const imageUrl: string = `https://drive.google.com/uc?export=view&id=${gdid}`;\n    setUrl(imageUrl);\n    changeMdLink(imageUrl, text);\n  };\n\n  const handleTextChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value: string = event.target.value;\n    setText(value);    \n    changeMdLink(url, value);\n  }\n\n  const handleCloseTip = (): void => {\n    setOpenTip(false);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div></div>\n        <div>\n          <form className={classes.root} noValidate autoComplete=\"off\">\n            <TextField id=\"gd-url\" label=\"共有可能なGoogleDriveの画像URL\" variant=\"outlined\" onChange={handleUrlChange} />\n            <TextField id=\"img-string\" label=\"リンクテキスト\" variant=\"outlined\" onChange={handleTextChange} />\n          </form>          \n        </div>\n        <div>\n          <TextField\n            id=\"link\"\n            label=\"Markdown記法のリンク\"\n            value={mdLink}\n            InputProps={{\n              readOnly: true,\n              endAdornment: (\n                <Tooltip\n                  arrow\n                  open={openTip}\n                  onClose={handleCloseTip}\n                  disableHoverListener\n                  placement='bottom'\n                  title='コピーしました!'\n                >\n                  <InputAdornment position=\"end\">\n                    <CopyToClipboard\n                      text={mdLink}\n                      onCopy={(text, result) => setOpenTip(result)}\n                    >\n                      <IconButton>\n                        <AssignmentIcon></AssignmentIcon>\n                      </IconButton>\n                    </CopyToClipboard>\n                  </InputAdornment>\n                </Tooltip>\n              )\n            }}\n            variant=\"filled\"\n          />\n        </div>\n        <div></div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}